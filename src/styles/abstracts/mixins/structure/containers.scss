@use "../../variables" as *;
@use "../../mixins/breakpoints" as *;

// Use this mixin to give any element the fullwidth container styles.
@mixin container-base-styles($disable-padding: "none") {
	width: 100%;
	box-sizing: border-box;
    margin-right: auto;
    margin-left: auto;

    @if $disable-padding != "left" and $disable-padding != "all" {
        padding-left: $container_padding;
    }
    @if $disable-padding != "right" and $disable-padding != "all" {
        padding-right: $container_padding;
    }
}

@mixin container-reg($element, $disable-padding: "none") {
	#{$element} {
		@include container-base-styles($disable-padding: $disable-padding);
	}

	@each $breakpoint, $container-max-width in $container-max-widths {
		@include media-breakpoint-up($breakpoint, $grid-breakpoints) {
			%responsive-container-#{$breakpoint} {
				max-width: $container-max-width;
			}
	
			// Extend each breakpoint which is smaller or equal to the current breakpoint
			$extend-breakpoint: true;
	
			@each $name, $width in $grid-breakpoints {
				@if ($extend-breakpoint) {
					// Use the commented out line below to generate specific classes. IE - .container-sm, .container-md
					// .container#{breakpoint-infix($name, $grid-breakpoints)} {
					#{$element} {
						@extend %responsive-container-#{$breakpoint};
					}
	
					// Once the current breakpoint is reached, stop extending
					@if ($breakpoint == $name) {
						$extend-breakpoint: false;
					}
				}
			}
		}
	}
}